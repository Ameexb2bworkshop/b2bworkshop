import * as React from "react";
import { connect, ResolveThunks } from "react-redux";
import { HasHistory, withHistory } from "@insite/mobius/utilities/HistoryContext";
import Zone from "@insite/client-framework/Components/Zone";
import WidgetGroups from "@insite/client-framework/Types/WidgetGroups";
import PageModule from "@insite/client-framework/Types/PageModule";
import { HasShellContext, withIsInShell } from "@insite/client-framework/Components/IsInShell";
import PageProps from "@insite/client-framework/Types/PageProps";
import ApplicationState from "@insite/client-framework/Store/ApplicationState";

const mapStateToProps = (state: ApplicationState) => ({
});

const mapDispatchToProps = {
};

type Props = HasHistory & ReturnType<typeof mapStateToProps> & ResolveThunks<typeof mapDispatchToProps> & HasShellContext & PageProps;

class {{pascalCase pageName}}Page extends React.Component<Props> {
    componentDidMount() {
        // load data here
    }

    render() {
        return <div>
            <Zone contentId={this.props.id} zoneName="Content"/>
        </div>;
    }
}

const pageModule: PageModule = {
    component: connect(mapStateToProps, mapDispatchToProps)(withHistory(withIsInShell({{pascalCase pageName}}Page))),
    definition: {
        group: WidgetGroups.{{camelCase pageName}},
        hasEditableUrlSegment: true,
        hasEditableTitle: true,
    },
};

export default pageModule;

export const {{pascalCase pageName}}PageContext = "{{pascalCase pageName}}Page";
